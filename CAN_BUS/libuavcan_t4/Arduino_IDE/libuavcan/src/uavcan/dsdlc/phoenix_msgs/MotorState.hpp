/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\CyberPalin\Desktop\uavcan\phoenix_msgs\5002.MotorState.uavcan
 */

#ifndef UAVCAN_PHOENIX_MSGS_MOTORSTATE_HPP_INCLUDED
#define UAVCAN_PHOENIX_MSGS_MOTORSTATE_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
uint8 POS_FRONT_LEFT  = 0
uint8 POS_FRONT_RIGHT = 1
uint8 POS_REAR_LEFT   = 2
uint8 POS_REAR_RIGHT  = 3
uint8 position

float16 temp_fet
float16 motor_current
float16 input_current
float16 input_voltage

int32 rpm
int32 fault_code
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.phoenix_msgs.MotorState
saturated uint8 position
saturated float16 temp_fet
saturated float16 motor_current
saturated float16 input_current
saturated float16 input_voltage
saturated int32 rpm
saturated int32 fault_code
******************************************************************************/

#undef position
#undef temp_fet
#undef motor_current
#undef input_current
#undef input_voltage
#undef rpm
#undef fault_code
#undef POS_FRONT_LEFT
#undef POS_FRONT_RIGHT
#undef POS_REAR_LEFT
#undef POS_REAR_RIGHT

namespace uavcan
{
namespace phoenix_msgs
{

template <int _tmpl>
struct UAVCAN_EXPORT MotorState_
{
    typedef const MotorState_<_tmpl>& ParameterType;
    typedef MotorState_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > POS_FRONT_LEFT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > POS_FRONT_RIGHT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > POS_REAR_LEFT;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > POS_REAR_RIGHT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > position;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > temp_fet;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > motor_current;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > input_current;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > input_voltage;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > rpm;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > fault_code;
    };

    enum
    {
        MinBitLen
            = FieldTypes::position::MinBitLen
            + FieldTypes::temp_fet::MinBitLen
            + FieldTypes::motor_current::MinBitLen
            + FieldTypes::input_current::MinBitLen
            + FieldTypes::input_voltage::MinBitLen
            + FieldTypes::rpm::MinBitLen
            + FieldTypes::fault_code::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::position::MaxBitLen
            + FieldTypes::temp_fet::MaxBitLen
            + FieldTypes::motor_current::MaxBitLen
            + FieldTypes::input_current::MaxBitLen
            + FieldTypes::input_voltage::MaxBitLen
            + FieldTypes::rpm::MaxBitLen
            + FieldTypes::fault_code::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::POS_FRONT_LEFT >::Type POS_FRONT_LEFT; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::POS_FRONT_RIGHT >::Type POS_FRONT_RIGHT; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::POS_REAR_LEFT >::Type POS_REAR_LEFT; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::POS_REAR_RIGHT >::Type POS_REAR_RIGHT; // 3

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::position >::Type position;
    typename ::uavcan::StorageType< typename FieldTypes::temp_fet >::Type temp_fet;
    typename ::uavcan::StorageType< typename FieldTypes::motor_current >::Type motor_current;
    typename ::uavcan::StorageType< typename FieldTypes::input_current >::Type input_current;
    typename ::uavcan::StorageType< typename FieldTypes::input_voltage >::Type input_voltage;
    typename ::uavcan::StorageType< typename FieldTypes::rpm >::Type rpm;
    typename ::uavcan::StorageType< typename FieldTypes::fault_code >::Type fault_code;

    MotorState_()
        : position()
        , temp_fet()
        , motor_current()
        , input_current()
        , input_voltage()
        , rpm()
        , fault_code()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<136 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 5002 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.phoenix_msgs.MotorState";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool MotorState_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        position == rhs.position &&
        temp_fet == rhs.temp_fet &&
        motor_current == rhs.motor_current &&
        input_current == rhs.input_current &&
        input_voltage == rhs.input_voltage &&
        rpm == rhs.rpm &&
        fault_code == rhs.fault_code;
}

template <int _tmpl>
bool MotorState_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(position, rhs.position) &&
        ::uavcan::areClose(temp_fet, rhs.temp_fet) &&
        ::uavcan::areClose(motor_current, rhs.motor_current) &&
        ::uavcan::areClose(input_current, rhs.input_current) &&
        ::uavcan::areClose(input_voltage, rhs.input_voltage) &&
        ::uavcan::areClose(rpm, rhs.rpm) &&
        ::uavcan::areClose(fault_code, rhs.fault_code);
}

template <int _tmpl>
int MotorState_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::position::encode(self.position, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temp_fet::encode(self.temp_fet, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_current::encode(self.motor_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::input_current::encode(self.input_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::input_voltage::encode(self.input_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rpm::encode(self.rpm, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::fault_code::encode(self.fault_code, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int MotorState_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::position::decode(self.position, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temp_fet::decode(self.temp_fet, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_current::decode(self.motor_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::input_current::decode(self.input_current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::input_voltage::decode(self.input_voltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rpm::decode(self.rpm, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::fault_code::decode(self.fault_code, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature MotorState_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xF65DB6CCAECF704AULL);

    FieldTypes::position::extendDataTypeSignature(signature);
    FieldTypes::temp_fet::extendDataTypeSignature(signature);
    FieldTypes::motor_current::extendDataTypeSignature(signature);
    FieldTypes::input_current::extendDataTypeSignature(signature);
    FieldTypes::input_voltage::extendDataTypeSignature(signature);
    FieldTypes::rpm::extendDataTypeSignature(signature);
    FieldTypes::fault_code::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename MotorState_<_tmpl>::ConstantTypes::POS_FRONT_LEFT >::Type
    MotorState_<_tmpl>::POS_FRONT_LEFT = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename MotorState_<_tmpl>::ConstantTypes::POS_FRONT_RIGHT >::Type
    MotorState_<_tmpl>::POS_FRONT_RIGHT = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename MotorState_<_tmpl>::ConstantTypes::POS_REAR_LEFT >::Type
    MotorState_<_tmpl>::POS_REAR_LEFT = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename MotorState_<_tmpl>::ConstantTypes::POS_REAR_RIGHT >::Type
    MotorState_<_tmpl>::POS_REAR_RIGHT = 3U; // 3

/*
 * Final typedef
 */
typedef MotorState_<0> MotorState;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::phoenix_msgs::MotorState > _uavcan_gdtr_registrator_MotorState;

}

} // Namespace phoenix_msgs
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::phoenix_msgs::MotorState >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::phoenix_msgs::MotorState::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::phoenix_msgs::MotorState >::stream(Stream& s, ::uavcan::phoenix_msgs::MotorState::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "position: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::position >::stream(s, obj.position, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "temp_fet: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::temp_fet >::stream(s, obj.temp_fet, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "motor_current: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::motor_current >::stream(s, obj.motor_current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "input_current: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::input_current >::stream(s, obj.input_current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "input_voltage: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::input_voltage >::stream(s, obj.input_voltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rpm: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::rpm >::stream(s, obj.rpm, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "fault_code: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorState::FieldTypes::fault_code >::stream(s, obj.fault_code, level + 1);
}

}

namespace uavcan
{
namespace phoenix_msgs
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::phoenix_msgs::MotorState::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::phoenix_msgs::MotorState >::stream(s, obj, 0);
    return s;
}

} // Namespace phoenix_msgs
} // Namespace uavcan

#endif // UAVCAN_PHOENIX_MSGS_MOTORSTATE_HPP_INCLUDED