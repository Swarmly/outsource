/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\CyberPalin\Desktop\uavcan\phoenix_msgs\5001.MotorTarget.uavcan
 */

#ifndef UAVCAN_PHOENIX_MSGS_MOTORTARGET_HPP_INCLUDED
#define UAVCAN_PHOENIX_MSGS_MOTORTARGET_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
uint16 servo_front_left         # servo signal [1000:2000]
uint16 servo_front_right        # servo signal [1000:2000]
uint16 servo_rear_left          # servo signal [1000:2000]
uint16 servo_rear_right         # servo signal [1000:2000]
float16 current_front_left      # motor_current
float16 current_front_right     # motor_current
float16 current_rear_left       # motor_current
float16 current_rear_right      # motor_current
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.phoenix_msgs.MotorTarget
saturated uint16 servo_front_left
saturated uint16 servo_front_right
saturated uint16 servo_rear_left
saturated uint16 servo_rear_right
saturated float16 current_front_left
saturated float16 current_front_right
saturated float16 current_rear_left
saturated float16 current_rear_right
******************************************************************************/

#undef servo_front_left
#undef servo_front_right
#undef servo_rear_left
#undef servo_rear_right
#undef current_front_left
#undef current_front_right
#undef current_rear_left
#undef current_rear_right

namespace uavcan
{
namespace phoenix_msgs
{

template <int _tmpl>
struct UAVCAN_EXPORT MotorTarget_
{
    typedef const MotorTarget_<_tmpl>& ParameterType;
    typedef MotorTarget_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > servo_front_left;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > servo_front_right;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > servo_rear_left;
        typedef ::uavcan::IntegerSpec< 16, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > servo_rear_right;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > current_front_left;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > current_front_right;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > current_rear_left;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > current_rear_right;
    };

    enum
    {
        MinBitLen
            = FieldTypes::servo_front_left::MinBitLen
            + FieldTypes::servo_front_right::MinBitLen
            + FieldTypes::servo_rear_left::MinBitLen
            + FieldTypes::servo_rear_right::MinBitLen
            + FieldTypes::current_front_left::MinBitLen
            + FieldTypes::current_front_right::MinBitLen
            + FieldTypes::current_rear_left::MinBitLen
            + FieldTypes::current_rear_right::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::servo_front_left::MaxBitLen
            + FieldTypes::servo_front_right::MaxBitLen
            + FieldTypes::servo_rear_left::MaxBitLen
            + FieldTypes::servo_rear_right::MaxBitLen
            + FieldTypes::current_front_left::MaxBitLen
            + FieldTypes::current_front_right::MaxBitLen
            + FieldTypes::current_rear_left::MaxBitLen
            + FieldTypes::current_rear_right::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::servo_front_left >::Type servo_front_left;
    typename ::uavcan::StorageType< typename FieldTypes::servo_front_right >::Type servo_front_right;
    typename ::uavcan::StorageType< typename FieldTypes::servo_rear_left >::Type servo_rear_left;
    typename ::uavcan::StorageType< typename FieldTypes::servo_rear_right >::Type servo_rear_right;
    typename ::uavcan::StorageType< typename FieldTypes::current_front_left >::Type current_front_left;
    typename ::uavcan::StorageType< typename FieldTypes::current_front_right >::Type current_front_right;
    typename ::uavcan::StorageType< typename FieldTypes::current_rear_left >::Type current_rear_left;
    typename ::uavcan::StorageType< typename FieldTypes::current_rear_right >::Type current_rear_right;

    MotorTarget_()
        : servo_front_left()
        , servo_front_right()
        , servo_rear_left()
        , servo_rear_right()
        , current_front_left()
        , current_front_right()
        , current_rear_left()
        , current_rear_right()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<128 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 5001 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.phoenix_msgs.MotorTarget";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool MotorTarget_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        servo_front_left == rhs.servo_front_left &&
        servo_front_right == rhs.servo_front_right &&
        servo_rear_left == rhs.servo_rear_left &&
        servo_rear_right == rhs.servo_rear_right &&
        current_front_left == rhs.current_front_left &&
        current_front_right == rhs.current_front_right &&
        current_rear_left == rhs.current_rear_left &&
        current_rear_right == rhs.current_rear_right;
}

template <int _tmpl>
bool MotorTarget_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(servo_front_left, rhs.servo_front_left) &&
        ::uavcan::areClose(servo_front_right, rhs.servo_front_right) &&
        ::uavcan::areClose(servo_rear_left, rhs.servo_rear_left) &&
        ::uavcan::areClose(servo_rear_right, rhs.servo_rear_right) &&
        ::uavcan::areClose(current_front_left, rhs.current_front_left) &&
        ::uavcan::areClose(current_front_right, rhs.current_front_right) &&
        ::uavcan::areClose(current_rear_left, rhs.current_rear_left) &&
        ::uavcan::areClose(current_rear_right, rhs.current_rear_right);
}

template <int _tmpl>
int MotorTarget_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::servo_front_left::encode(self.servo_front_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::servo_front_right::encode(self.servo_front_right, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::servo_rear_left::encode(self.servo_rear_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::servo_rear_right::encode(self.servo_rear_right, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_front_left::encode(self.current_front_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_front_right::encode(self.current_front_right, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_rear_left::encode(self.current_rear_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_rear_right::encode(self.current_rear_right, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int MotorTarget_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::servo_front_left::decode(self.servo_front_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::servo_front_right::decode(self.servo_front_right, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::servo_rear_left::decode(self.servo_rear_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::servo_rear_right::decode(self.servo_rear_right, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_front_left::decode(self.current_front_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_front_right::decode(self.current_front_right, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_rear_left::decode(self.current_rear_left, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current_rear_right::decode(self.current_rear_right, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature MotorTarget_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x6C02C3C601D4A47BULL);

    FieldTypes::servo_front_left::extendDataTypeSignature(signature);
    FieldTypes::servo_front_right::extendDataTypeSignature(signature);
    FieldTypes::servo_rear_left::extendDataTypeSignature(signature);
    FieldTypes::servo_rear_right::extendDataTypeSignature(signature);
    FieldTypes::current_front_left::extendDataTypeSignature(signature);
    FieldTypes::current_front_right::extendDataTypeSignature(signature);
    FieldTypes::current_rear_left::extendDataTypeSignature(signature);
    FieldTypes::current_rear_right::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef MotorTarget_<0> MotorTarget;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::phoenix_msgs::MotorTarget > _uavcan_gdtr_registrator_MotorTarget;

}

} // Namespace phoenix_msgs
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::phoenix_msgs::MotorTarget::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget >::stream(Stream& s, ::uavcan::phoenix_msgs::MotorTarget::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "servo_front_left: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::servo_front_left >::stream(s, obj.servo_front_left, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "servo_front_right: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::servo_front_right >::stream(s, obj.servo_front_right, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "servo_rear_left: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::servo_rear_left >::stream(s, obj.servo_rear_left, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "servo_rear_right: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::servo_rear_right >::stream(s, obj.servo_rear_right, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current_front_left: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::current_front_left >::stream(s, obj.current_front_left, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current_front_right: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::current_front_right >::stream(s, obj.current_front_right, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current_rear_left: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::current_rear_left >::stream(s, obj.current_rear_left, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current_rear_right: ";
    YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget::FieldTypes::current_rear_right >::stream(s, obj.current_rear_right, level + 1);
}

}

namespace uavcan
{
namespace phoenix_msgs
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::phoenix_msgs::MotorTarget::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::phoenix_msgs::MotorTarget >::stream(s, obj, 0);
    return s;
}

} // Namespace phoenix_msgs
} // Namespace uavcan

#endif // UAVCAN_PHOENIX_MSGS_MOTORTARGET_HPP_INCLUDED