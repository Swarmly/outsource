/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\CyberPalin\Desktop\uavcan\phoenix_msgs\5000.RemoteControl.uavcan
 */

#ifndef UAVCAN_PHOENIX_MSGS_REMOTECONTROL_HPP_INCLUDED
#define UAVCAN_PHOENIX_MSGS_REMOTECONTROL_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
uint8 DRIVE_MODE_RC_DISCONNECTED  = 0   # no remote control connected
uint8 DRIVE_MODE_MANUAL           = 1   # up
uint8 DRIVE_MODE_SEMI_AUTONOMOUS  = 2   # center
uint8 DRIVE_MODE_AUTONOMOUS       = 3   # down
uint8 drive_mode                        # left switch

uint8 AUX_MODE_RC_DISCONNECTED  = 0     # no remote control connected
uint8 AUX_MODE_UP  = 1                  # up
uint8 AUX_MODE_CENTER = 2               # center
uint8 AUX_MODE_DOWN   = 3               # down
uint8 aux_mode                          # right switch

float16 velocity                # left stick up/down [-1:1]
float16 steer_rear              # left stick left/right [-1:1]
float16 steer_front             # right stick left/right [-1:1]
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.phoenix_msgs.RemoteControl
saturated uint8 drive_mode
saturated uint8 aux_mode
saturated float16 velocity
saturated float16 steer_rear
saturated float16 steer_front
******************************************************************************/

#undef drive_mode
#undef aux_mode
#undef velocity
#undef steer_rear
#undef steer_front
#undef DRIVE_MODE_RC_DISCONNECTED
#undef DRIVE_MODE_MANUAL
#undef DRIVE_MODE_SEMI_AUTONOMOUS
#undef DRIVE_MODE_AUTONOMOUS
#undef AUX_MODE_RC_DISCONNECTED
#undef AUX_MODE_UP
#undef AUX_MODE_CENTER
#undef AUX_MODE_DOWN

namespace uavcan
{
namespace phoenix_msgs
{

template <int _tmpl>
struct UAVCAN_EXPORT RemoteControl_
{
    typedef const RemoteControl_<_tmpl>& ParameterType;
    typedef RemoteControl_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > DRIVE_MODE_RC_DISCONNECTED;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > DRIVE_MODE_MANUAL;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > DRIVE_MODE_SEMI_AUTONOMOUS;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > DRIVE_MODE_AUTONOMOUS;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > AUX_MODE_RC_DISCONNECTED;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > AUX_MODE_UP;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > AUX_MODE_CENTER;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > AUX_MODE_DOWN;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > drive_mode;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > aux_mode;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > velocity;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > steer_rear;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > steer_front;
    };

    enum
    {
        MinBitLen
            = FieldTypes::drive_mode::MinBitLen
            + FieldTypes::aux_mode::MinBitLen
            + FieldTypes::velocity::MinBitLen
            + FieldTypes::steer_rear::MinBitLen
            + FieldTypes::steer_front::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::drive_mode::MaxBitLen
            + FieldTypes::aux_mode::MaxBitLen
            + FieldTypes::velocity::MaxBitLen
            + FieldTypes::steer_rear::MaxBitLen
            + FieldTypes::steer_front::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::DRIVE_MODE_RC_DISCONNECTED >::Type DRIVE_MODE_RC_DISCONNECTED; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::DRIVE_MODE_MANUAL >::Type DRIVE_MODE_MANUAL; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::DRIVE_MODE_SEMI_AUTONOMOUS >::Type DRIVE_MODE_SEMI_AUTONOMOUS; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::DRIVE_MODE_AUTONOMOUS >::Type DRIVE_MODE_AUTONOMOUS; // 3
    static const typename ::uavcan::StorageType< typename ConstantTypes::AUX_MODE_RC_DISCONNECTED >::Type AUX_MODE_RC_DISCONNECTED; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::AUX_MODE_UP >::Type AUX_MODE_UP; // 1
    static const typename ::uavcan::StorageType< typename ConstantTypes::AUX_MODE_CENTER >::Type AUX_MODE_CENTER; // 2
    static const typename ::uavcan::StorageType< typename ConstantTypes::AUX_MODE_DOWN >::Type AUX_MODE_DOWN; // 3

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::drive_mode >::Type drive_mode;
    typename ::uavcan::StorageType< typename FieldTypes::aux_mode >::Type aux_mode;
    typename ::uavcan::StorageType< typename FieldTypes::velocity >::Type velocity;
    typename ::uavcan::StorageType< typename FieldTypes::steer_rear >::Type steer_rear;
    typename ::uavcan::StorageType< typename FieldTypes::steer_front >::Type steer_front;

    RemoteControl_()
        : drive_mode()
        , aux_mode()
        , velocity()
        , steer_rear()
        , steer_front()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 5000 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.phoenix_msgs.RemoteControl";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool RemoteControl_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        drive_mode == rhs.drive_mode &&
        aux_mode == rhs.aux_mode &&
        velocity == rhs.velocity &&
        steer_rear == rhs.steer_rear &&
        steer_front == rhs.steer_front;
}

template <int _tmpl>
bool RemoteControl_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(drive_mode, rhs.drive_mode) &&
        ::uavcan::areClose(aux_mode, rhs.aux_mode) &&
        ::uavcan::areClose(velocity, rhs.velocity) &&
        ::uavcan::areClose(steer_rear, rhs.steer_rear) &&
        ::uavcan::areClose(steer_front, rhs.steer_front);
}

template <int _tmpl>
int RemoteControl_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::drive_mode::encode(self.drive_mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::aux_mode::encode(self.aux_mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::velocity::encode(self.velocity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::steer_rear::encode(self.steer_rear, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::steer_front::encode(self.steer_front, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int RemoteControl_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::drive_mode::decode(self.drive_mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::aux_mode::decode(self.aux_mode, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::velocity::decode(self.velocity, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::steer_rear::decode(self.steer_rear, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::steer_front::decode(self.steer_front, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature RemoteControl_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x41F8394A13322775ULL);

    FieldTypes::drive_mode::extendDataTypeSignature(signature);
    FieldTypes::aux_mode::extendDataTypeSignature(signature);
    FieldTypes::velocity::extendDataTypeSignature(signature);
    FieldTypes::steer_rear::extendDataTypeSignature(signature);
    FieldTypes::steer_front::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::DRIVE_MODE_RC_DISCONNECTED >::Type
    RemoteControl_<_tmpl>::DRIVE_MODE_RC_DISCONNECTED = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::DRIVE_MODE_MANUAL >::Type
    RemoteControl_<_tmpl>::DRIVE_MODE_MANUAL = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::DRIVE_MODE_SEMI_AUTONOMOUS >::Type
    RemoteControl_<_tmpl>::DRIVE_MODE_SEMI_AUTONOMOUS = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::DRIVE_MODE_AUTONOMOUS >::Type
    RemoteControl_<_tmpl>::DRIVE_MODE_AUTONOMOUS = 3U; // 3

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::AUX_MODE_RC_DISCONNECTED >::Type
    RemoteControl_<_tmpl>::AUX_MODE_RC_DISCONNECTED = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::AUX_MODE_UP >::Type
    RemoteControl_<_tmpl>::AUX_MODE_UP = 1U; // 1

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::AUX_MODE_CENTER >::Type
    RemoteControl_<_tmpl>::AUX_MODE_CENTER = 2U; // 2

template <int _tmpl>
const typename ::uavcan::StorageType< typename RemoteControl_<_tmpl>::ConstantTypes::AUX_MODE_DOWN >::Type
    RemoteControl_<_tmpl>::AUX_MODE_DOWN = 3U; // 3

/*
 * Final typedef
 */
typedef RemoteControl_<0> RemoteControl;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::phoenix_msgs::RemoteControl > _uavcan_gdtr_registrator_RemoteControl;

}

} // Namespace phoenix_msgs
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::phoenix_msgs::RemoteControl::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl >::stream(Stream& s, ::uavcan::phoenix_msgs::RemoteControl::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "drive_mode: ";
    YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl::FieldTypes::drive_mode >::stream(s, obj.drive_mode, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "aux_mode: ";
    YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl::FieldTypes::aux_mode >::stream(s, obj.aux_mode, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "velocity: ";
    YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl::FieldTypes::velocity >::stream(s, obj.velocity, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "steer_rear: ";
    YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl::FieldTypes::steer_rear >::stream(s, obj.steer_rear, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "steer_front: ";
    YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl::FieldTypes::steer_front >::stream(s, obj.steer_front, level + 1);
}

}

namespace uavcan
{
namespace phoenix_msgs
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::phoenix_msgs::RemoteControl::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::phoenix_msgs::RemoteControl >::stream(s, obj, 0);
    return s;
}

} // Namespace phoenix_msgs
} // Namespace uavcan

#endif // UAVCAN_PHOENIX_MSGS_REMOTECONTROL_HPP_INCLUDED